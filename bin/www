#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var app_coap = require('../controllers/coap/oauth2');
var config = require('../config')
var debug = require('debug')('idm:server');
var fs = require("fs");
var http = require('http');
var https = require("https");


if (config.https.enabled) {
  var options = {
      key: fs.readFileSync(config.https.key_file).toString(),
      cert: fs.readFileSync(config.https.cert_file).toString()
  };
  if (config.https.ca_certs) {
      options.ca = [];
      for (var ca in config.https.ca_certs) {
          options.ca.push(fs.readFileSync(config.https.ca_certs[ca]).toString());
      }
  }
}


/**
 * Get port from environment and store in Express.
 */

/**
 * Create HTTP or HTTPS server.
 */

var server = http.createServer(app); 

server.listen(config.port);
server.on('error', onError);
server.on('listening', onListening);

if (config.https.enabled) {
  var serverSecure = https.createServer(options, app);

  serverSecure.listen(config.https.port, function() {
    debug('Listening on port ' + serverSecure.address().port);
  });

}
 

/**
 * Create MQTT server.
 */

var mqtt = require('mosca');
var settings = {
  port:1883
}

var mqtt_server = new mqtt.Server(settings);

mqtt_server.on('ready', function(){
  debug("Mosca listenning on port 1883");
});

mqtt_server.on('clientConnected', function(client) {
    debug('client connected', client.id);
});

mqtt_server.on('clientDisconnected', function(client) {
  debug('Client Disconnected:', client.id);
});

// fired when a message is received
mqtt_server.on('published', function(packet, client) {
  debug('Published', packet.payload.toString('utf-8'));
  if (client) {
  }
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var port = error.port;

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
