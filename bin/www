#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var app_coap = require('../controllers/coap/oauth2');
var config = require('../config')
var debug = require('debug')('idm:server');
var fs = require("fs");
var http = require('http');
var https = require("https");

/**
 * Create COAP server.
 */

// COAP

var dgram = require('dgram');
var server = dgram.createSocket('udp4');

if (config.coap.enabled) {
  server.on('error', (err) => {
    debug(`server error:\n${err.stack}`);
    server.close();
  });

  server.on('message', async (msg, rinfo) => {
    let response = await app_coap.paths(msg)
    var client = dgram.createSocket('udp4');
    client.send(response, 0, response.length, rinfo.port, rinfo.address,function(error){
      client.close();
    });
  });

  server.on('listening', () => {
    debug("COAP listening on " + config.coap.port);
  });

  server.bind(config.coap.port);
}

/**
 * Create COAPs server.
 */

// COAPS
var index = require('../lib/dtls');

if (config.coaps.enabled) {

  let dtls;
  try {
    dtls = index.createDTLSServer(config.coaps.crt_file, config.coaps.key_file, config.coaps.port, "udp4")
  }
  catch (err) {
    if (err.code == "ENOENT") {
      debug("Certificate and Key not found, generate new ones with the following command:\n  $ openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout cert.key -out cert.crt -subj '/CN=node-dtls-tunnel/O=m4n3dw0lf/C=BR'");
      process.exit(1)
    }
    else {
       throw err;
       process.exit(1)
    }
  }

  debug("COAPs listening on " + config.coaps.port);

  if (typeof(dtls) != "undefined") {
    dtls.on( 'secureConnection', function( socket ) {
      socket.on( 'message', async function( message ) {
        let response = await app_coap.paths(message)
        socket.send(response);
      });
    });
  }
}





if (config.https.enabled) {
  var options = {
      key: fs.readFileSync(config.https.key_file).toString(),
      cert: fs.readFileSync(config.https.cert_file).toString()
  };
  if (config.https.ca_certs) {
      options.ca = [];
      for (var ca in config.https.ca_certs) {
          options.ca.push(fs.readFileSync(config.https.ca_certs[ca]).toString());
      }
  }
}


/**
 * Get port from environment and store in Express.
 */

/**
 * Create HTTP or HTTPS server.
 */

var server = http.createServer(app); 

server.listen(config.port);
server.on('error', onError);
server.on('listening', onListening);

if (config.https.enabled) {
  var serverSecure = https.createServer(options, app);

  serverSecure.listen(config.https.port, function() {
    debug('Listening on port ' + serverSecure.address().port);
  });

}


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var port = error.port;

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
